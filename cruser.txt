INCLUDE Irvine32.inc
; prototypes of functions
welcome proto
spaceLabel proto
inputNameFunc proto
display proto
displayBoard proto
createLevel01 PROTO
swapping PROTO
comboRow PROTO
comboCol PROTO
boardDrop PROTO
displayBoardlevel02 PROTO
swappingLevel02 PROTO
comboRowlevel02 PROTO
comboCollevel02 PROTO
boarddroplevel02 PROTO

bufferSize = 30
; data part is here
.data
; level controller
runLevel dd 5

loopCounter dd 0
moves dd 15
zeroCounter dd 0
welcomeStr db "                       Welcome to the game",0
nameInputStr db bufferSize DUP("0")
namelength dd ?
nameStr db "Enter your Name: ",0
score dd 0
tempVar db 0
showName db " Name: ",0
showScore db "                    Score: ",0
showScoreforFile db "Score: ",0
space db "           ",0
space01 db "  ",0
singleSpace db " ", 0
checknum db 0
boardDropCounter dd 1
tempStore DD 0
loopie dd 0
errorStr db "Sorry Can't move :(",0
moveStr db "                      Moves : ",0
swapstrrow db "Enter the index of row you want to swap : ",0
swapStrCol db "Enter the index of col you want to swap : ",0
swapstr db "Press 1 swap up above",0dh,0ah
db "Press 2 swap down",0dh,0ah
db"Press 3 swap right",0dh,0ah
db"Press 4 swap left",0dh,0ah,0dh,0ah
db "Enter your choice : ",0
row_index dd ?
zeroCounter1 dd 0
comboRowCheck dd ?
comboColCheck dd ?
col_index dd ?
inputChoice db ?
temp dd 10
counterRow dd 2
counterCol dd 2
counter dd 0
tempStore1 dd ?
level01Rand db 5
level02Rand db 4
level03Rand db 5
previousNumRand db 0
numberBomb db ?
nextLine db 0dh,0ah , 0
; level 01 board
boardArray db 2,5,2,2,3,4,'B',1,2,1
boardsize = ($ - boardArray)
db  5,2,4,1,2,5,5,3,2,3
db  3,1,3,3,4,2,4,5,4,4
db  4,1,2,2,'B',2,4,2,3,2
db  3,5,5,4,3,3,2,4,1,4
db  1,2,3,2,1,4,2,2,1,5
db  2,1,1,4,5,2,4,1,3,2
db  3,1,'B',4,4,2,1,3,2,5
db  2,2,1,5,3,1,4,'B',2,1
db  1,4,1,1,5,2,4,2,1,3
; level 02 board
level2board db 'x','x','x',2,3,4,1,2,'x','x','x'
boardsize = ($ - level2board)
db  'x','x','x',4,2,3,1,4,'x','x','x'
db  'x','x','x',2,3,2,'B',4,'x','x','x'
db  4,2,1,2,3,1,4,3,2,3,3
db  3,1,2,4,1,'B',3,2,4,4,1
db  1,2,1,2,3,4,1,2,4,1,2
db  2,1,3,'B',1,3,3,1,2,4,2
db  3,1,2,4,4,2,1,3,4,4,1
db  'x','x','x',3,3,2,4,4,'x','x','x'
db  'x','x','x',1,2,'B',3,2,'x','x','x'
db  'x','x','x',1,2,4,3,2,'x','x','x'

; level 03 board
level3board db 2,5,2,'X',3,4,1,3,5,1
boardsize = ($ - level3board)
db  7,2,4,1,3,'X',5,4,2,3
db  3,1,3,'B',4,2,4,'B',2,4
db  4,1,'X',2,5,3,4,'X',3,2
db  3,3,5,4,3,2,2,'B',1,4
db  1,5,3,2,'X',4,2,2,1,2
db  2,1,1,4,5,2,1,1,3,5
db  3,1,'X',4,4,2,1,3,2,5
db  4,2,1,5,3,1,4,2,'X',1
db  2,4,'B',1,5,'X',1,2,3,4


; for filing
filename BYTE "output.txt",0
fileHandle HANDLE ?
stringLength DWORD ?
str2 BYTE "Bytes written to file [output.txt]: ",0
showScoreStr db "00000",0


; code part is here
.code

; main function
main PROC

call welcome
call clrscr
call inputNameFunc
call clrscr
; in this display we are calling level 01
call display
;call filingFunction
; in this display we are calling level 02
call display_level02
;call filingFunction
; in this display we are calling level 02
call display_level03
call filingFunction
;function for filing
call filingFunction

exit
main ENDP

;file handle function
filingFunction PROC
; Create a new text file
mov edx,OFFSET filename
call CreateOutputFile
mov fileHandle,eax

; Error checking
cmp eax, INVALID_HANDLE_VALUE; Found an error?
jne file_ok; No: skip
jmp quit
file_ok:


; Write buffer to output file
; putting this in file ( Name: )
mov ebx , lengthof showName
mov stringLength , ebx
mov eax,fileHandle
mov edx,OFFSET showName
mov ecx,stringLength
call WriteToFile

;putting name of the person
mov eax,fileHandle
mov edx,OFFSET nameInputStr
inc namelength
mov ecx,namelength
call WriteToFile


; putting this in file ( nextLine )
mov ebx , lengthof nextLine
mov stringLength , ebx
mov eax,fileHandle
mov edx,OFFSET nextLine
mov ecx,stringLength
call WriteToFile


; putting this in file ( Score: )
mov ebx , lengthof showScoreforFile
mov stringLength , ebx
mov eax,fileHandle
mov edx,OFFSET showScoreforFile
mov ecx,stringLength
call WriteToFile

;converting score to string
push eax
push esi
push ecx
push edx

mov eax , score
mov esi, 4
; calulating the number into string
L1:
mov ecx , 10
mov edx , 0
div ecx
add dl , 48
mov showScoreStr[esi] , dl
dec esi
cmp eax , 0
jne L1

pop edx
pop ecx
pop esi
pop eax


; Write score to output file
mov eax,fileHandle
mov edx, offset showScoreStr
mov ecx, lengthof showScoreStr
call WriteToFile

;closing the file
call CloseFile


quit:
ret
filingFunction endp


;space Label function
spaceLabel proc
; loop for printing space
spacing:
call crlf
loop spacing
ret
spaceLabel endp


; welcome function
welcome proc
push ecx  ; for mainting the ecx value
push edx  ; for mainting the edx value
mov ecx , 7
call spaceLabel ; calling proc
; wrting the string
mov edx , offset welcomeStr
mov eax,15
call settextcolor
call WriteString
mov ecx , 7
call spaceLabel ; calling proc
call waitmsg
pop ecx
pop edx
ret
welcome endp

; input Name function which takes input of player name
inputNameFunc proc
push edx
push ecx
mov ecx , 7
call spaceLabel
mov edx , offset nameStr
mov eax,15
call settextcolor
call writestring
mov edx , offset nameInputStr
mov ecx , bufferSize
call readString
mov nameLength , eax
mov ecx , 7
call spaceLabel
call waitmsg
pop ecx
pop edx
ret
inputNameFunc endp

; display function which will display the board
display PROC
; printing the name and score at top
mov eax , runLevel
mov moves , eax
mov loopCounter , eax
mov eax , 0
L1:
mov edx , offset showName
call writeString
mov edx , offset nameInputStr;
call writeString
mov edx , offset showScore;
call writeString
mov eax , 0
mov eax , score;
call writedec
mov edx,offset moveStr
call writestring
mov eax,0
mov eax,moves
call writedec
call crlf
call crlf
; printing the board
call displayBoard
mov eax,15
call settextcolor
call crlf
call crlf
call getInput
call swapping
L2:
call comboRow
call comboCol
call boardDrop
call putValuelevel01
call comboRow
call comboCol
cmp comboRowCheck,0
je L2
cmp comboColCheck,0
jne exit0
jmp L2
exit0:
call waitmsg
call clrscr
sub moves,1
sub loopCounter, 1
cmp loopCounter, 0
jne L1
ret
display endp

display_level02 PROC
; printing the name and score at top
mov eax , runLevel
mov moves , eax
mov loopCounter, eax
mov eax , 0
L1:
mov edx , offset showName
call writeString
mov edx , offset nameInputStr;
call writeString
mov edx , offset showScore;
call writeString
mov eax , 0
mov eax , score;
call writedec
mov edx,offset moveStr
call writestring
mov eax,0
mov eax,moves
call writedec
call crlf
call crlf
; printing the board
call displayBoardlevel02
mov eax,15
call settextcolor
call crlf
call crlf
;taking input for swap
call getInput
;swaping
call swappingLevel02

L2:
call comboRowlevel02
call comboCollevel02
call boarddroplevel02
call putValuelevel02
call comboRowlevel02
call comboCollevel02
cmp comboRowCheck,0
je L2
cmp comboColCheck,0
jne exit0
jmp L2
exit0:
call waitmsg
call clrscr
sub moves,1
sub loopCounter, 1
cmp loopCounter, 0

jne L1

ret
display_level02 endp

; display whole logic of level 03
display_level03 PROC
; printing the name and score at top
mov eax , runLevel
mov moves , eax
mov loopCounter , eax
mov eax , 0
L1:
mov edx , offset showName
call writeString
mov edx , offset nameInputStr;
call writeString
mov edx , offset showScore;
call writeString
mov eax , 0
mov eax , score;
call writedec
mov edx,offset moveStr
call writestring
mov eax,0
mov eax,moves
call writedec
call crlf
call crlf
; printing the board
call displayBoardLevel03
mov eax,15
call settextcolor
call crlf
call crlf
;taking input for swap
call getInput
;swaping
call swappingOfLevel03
L2:
call comboRowLevel3
call comboColLevel3
call boardDropLevel3
call putValuelevel03
call comboRowLevel3
call comboColLevel3
cmp comboRowCheck,0
je L2
cmp comboColCheck,0
jne exit0
jmp L2
exit0:
call waitmsg
call clrscr
sub moves,1
sub loopCounter, 1
cmp loopCounter, 0
jne L1

ret
display_level03 endp




; function of display board
displayBoard PROC
mov ebx,OFFSET boardArray
mov ecx , 10
l1:
push ecx
mov ecx, 10

mov edx , offset space
call writestring
l2:
mov eax,0
mov al ,[ebx]
cmp al , 'B'
je next
cmp al,1
jne next2
mov dl,al
mov eax,4
call settextcolor
mov eax,0
mov al,dl
call writedec
jmp agayjumpkro
next2:
cmp al,2
jne next3
mov dl,al
mov eax,3
call settextcolor
mov eax,0
mov al,dl
call writedec
jmp agayjumpkro
next3:
cmp al,3
jne next4
mov dl,al
mov eax,1
call settextcolor
mov eax,0
mov al,dl
call writedec
jmp agayjumpkro
next4:
cmp al,4
jne next5
mov dl,al
mov eax,5
call settextcolor
mov eax,0
mov al,dl
call writedec
jmp agayjumpkro
next5:
cmp al,5
mov dl,al
mov eax,8
call settextcolor
mov eax,0
mov al,dl
call writedec
jmp agayjumpkro
next:
mov dl,al
mov eax,14
call settextcolor
mov eax,0
mov al,dl
call writeChar
agayjumpkro:
mov edx ,offset space01
call writestring
add ebx,Type boardArray
sub ecx,1
cmp ecx,0
jne L2
call crlf
pop ecx

sub ecx,1
cmp ecx,0
jne L1
ret
displayBoard endp

;swapping proc

swapping PROC
push esi
push ebx
push edx
push ecx
mov esi,row_index
mov ebx,col_index
cmp inputChoice,1
je up
cmp inputChoice,2
je down
cmp inputChoice,3
je right
cmp inputChoice,4
jmp left
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
up:
cmp row_index,1
jb error
mov eax , row_index
mov ecx , 10
mul ecx
mov esi , eax
mov dl,boardArray[esi+ebx]  ; the element he wants to swap
mov al,boardArray[esi -10 +ebx]
mov boardArray[esi+ebx],al
mov boardArray[esi-10+ebx],dl
cmp al , 'B'
jne numberGiveUp
mov al , 0
mov numberBomb , dl
mov boardArray[esi+ebx],al
mov boardArray[esi-10+ebx],dl
jmp bombphardo

numberGiveUp:
cmp dl , 'B'
jne next0
mov dl , 0
mov numberBomb , al
mov boardArray[esi+ebx],al
mov boardArray[esi-10+ebx],dl
jmp bombphardo


jmp next0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
down:
cmp row_index,8
ja error
mov eax , row_index
mov ecx , 10
mul ecx
mov esi , eax
mov dl,boardArray[esi+ebx] ; the element he wants to swap
mov al,boardArray[esi+10+ebx]
mov boardArray[esi+ebx],al
mov boardArray[esi+10+ebx],dl
cmp al , 'B'
jne numberGiveDown
mov al , 0
mov numberBomb , dl
mov boardArray[esi+ebx],al
mov boardArray[esi+10+ebx],dl
jmp bombphardo

numberGiveDown:
cmp dl , 'B'
jne next0
mov dl , 0
mov numberBomb , al
mov boardArray[esi+ebx],al
mov boardArray[esi+10+ebx],dl
jmp bombphardo

jmp next0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
right:
cmp col_index,8
ja error
mov eax , row_index
mov ecx , 10
mul ecx
mov esi , eax
mov dl,boardArray[esi+ebx]  ; the element he wants to swap
mov al,boardArray[esi+1+ebx]
mov boardArray[esi+ebx],al
mov boardArray[esi+1+ebx],dl
cmp al , 'B'
jne numberGiveRight
mov al , 0
mov numberBomb , dl
mov boardArray[esi+ebx],al
mov boardArray[esi+1+ebx],dl
jmp bombphardo

numberGiveRight:
cmp dl , 'B'
jne next0
mov dl , 0
mov numberBomb , al
mov boardArray[esi+ebx],al
mov boardArray[esi+1+ebx],dl
jmp bombphardo

jmp next0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
left:
cmp col_index,1
jb error
mov eax , row_index
mov ecx , 10
mul ecx
mov esi , eax
mov dl,boardArray[esi+ebx]  ; the element he wants to swap
mov al,boardArray[esi-1+ebx]
mov boardArray[esi+ebx],al
mov boardArray[esi-1+ebx],dl
cmp al , 'B'
jne numberGiveLeft
mov al , 0
mov numberBomb , dl
mov boardArray[esi+ebx],al
mov boardArray[esi-1+ebx],dl
jmp bombphardo

numberGiveLeft:
cmp dl , 'B'
jne next0
mov dl , 0
mov numberBomb , al
mov boardArray[esi+ebx],al
mov boardArray[esi-1+ebx],dl
jmp bombphardo

jmp next0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
error:
call crlf
mov edx,offset errorStr
call writestring
jmp next0

bombphardo:

call bombSmashing

next0:
pop ecx
pop edx
pop ebx
pop esi
ret
swapping endp

comboRow PROC
mov ebx,0
mov esi,0
mov ecx,0
mov eax,0
mov edx,0
mov ecx,10
mov comboRowCheck,1
L1:
push ecx
mov loopie,10
mov edx,10
mov eax,esi
MUL edx
mov esi,eax
mov eax,0
mov edx,0
L2:
mov edx,ebx
mov al,boardArray[esi+ebx]
cmp al,0
je next1
add ebx,type boardArray
cmp al,boardArray[esi+ebx]
jne next1
L3:
cmp ebx,8
ja next
add ebx,type boardArray
cmp al,boardArray[esi+ebx]
jne next
add counterRow,1
jmp L3
next:
cmp counterRow,3
jb next1
mov eax,counterRow
mov ebx,edx
mov comboRowCheck,0
L4:
cmp eax,0
je next2
mov boardArray[esi+ebx],0
add ebx,type boardArray
sub eax,1
jmp L4
next1:
mov ebx,edx
add ebx,type boardArray
jmp next3
next2:
mov eax,score
add eax,counterRow
mov score,eax
mov counterRow,2
next3:
sub loopie,1
cmp loopie,0
jne L2
mov ebx,0
add counter,1
mov esi,counter
pop ecx
sub ecx,1
jne L1
mov counter,0
call crlf
call crlf
ret
comboRow endp

comboCol PROC
mov comboColCheck,1
mov esi,0
mov ebx,0
next1:
mov ecx,10
L1:
push ecx
mov ecx,9
L2:
mov al,boardArray[esi+ebx]
mov edx,esi
cmp al,0
je next5
add esi,10
cmp al,boardArray[esi+ebx]
jne next4
L3:
cmp esi,80
ja next0
add esi,10
cmp al,boardArray[esi+ebx]
jne next0
add counterCol,1
jmp L3
next0:
cmp counterCol,3
jb next4
mov eax,counterCol
mov esi,0
mov comboColCheck,0
mov esi,edx
L4:
cmp eax,0
je next3
mov boardArray[esi+ebx],0
sub eax,1
add esi,10
jmp L4
next3:
mov eax,score
add eax,counterCol
mov score,eax
next5:
mov counterCol,2
next4:
mov esi,edx
add esi,10
next2:
sub ecx,1
cmp ecx,0
jne L2
add ebx,1
mov esi,0
pop ecx
sub ecx,1
cmp ecx,0
jne L1
ret
comboCol endp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
boardDrop PROC
mov esi,9
mov ebx,0
mov ecx,10
L1:
push ecx
mov ecx,10
mov eax,esi
MUL ecx
mov esi,eax
L5:
mov al,boardArray[esi+ebx]
cmp al,0
jne next3
add zeroCounter,1
next3:
sub esi,10
loop L5
mov eax,0
mov ecx,10
mov esi,9
mov eax,esi
MUL temp
mov esi,eax
sub ecx,zeroCounter
L2:
mov al,boardArray[esi+ebx]
cmp esi,0
je next1
cmp al,0
jne next
mov tempStore,esi
L3:
cmp boardArray[esi-10+ebx],0
jne L4
add boardDropCounter,1
sub esi,10
jmp L3
L4:
mov esi,tempStore
mov ebp,esi
mov al,boardArray[esi+ebx]
mov tempVar,al
mov eax,boardDropCounter
MUL temp
sub ebp,eax
mov eax,0
mov edx,0
mov dl,boardArray[ebp+ebx]
MOV al,tempVar
mov boardArray[ebp+ebx],al
mov boardArray[esi+ebx],dl
next:
mov boardDropCounter,1
sub esi,10
next1:
sub ecx,1
cmp ecx,0
jne L2
mov zeroCounter,0
mov esi,9
add ebx,1
pop ecx
sub ecx,1
cmp ecx,0
jne L1
ret
boardDrop endp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
displayBoardlevel02 PROC
push esi
push ecx
push ebx

mov ebx,OFFSET level2board
mov ecx , 11
l1:
push ecx
mov ecx, 11

mov edx , offset space
call writestring
l2:
mov eax,0
mov al ,[ebx]
mov dl,al
cmp al , 'x'
je next
cmp al , 'B'
je bombkodekhao
jmp agayjumpkro
bombkodekhao:
mov al , [ebx]
mov dl,al
mov eax,14
call settextcolor
mov eax,0
mov al,dl
call writeChar
jmp next01
agayjumpkro:


cmp dl,1
jne next2
mov eax,4
call settextcolor
mov al,dl
call writedec
jmp next01
next2:
cmp dl,2
jne next3
mov eax,1
call settextcolor
mov al,dl
call writedec
jmp next01
next3:
cmp dl,3
jne next4
mov eax,3
call settextcolor
mov al,dl
call writedec
jmp next01
next4:
mov eax,13
call settextcolor
mov al,dl
call writedec
jmp next01
next:
mov edx , offset singleSpace
call writestring
next01:
mov edx , offset space01
call writestring
add ebx,Type level2board
sub ecx,1
cmp ecx,0
jne L2
call crlf
pop ecx
sub ecx,1
cmp ecx,0
jne L1

pop ebx
pop ecx
pop esi
ret
displayBoardlevel02 endp

swappingLevel02 PROC
mov esi,row_index
mov ebx,col_index
cmp inputChoice,1
je up
cmp inputChoice,2
je down
cmp inputChoice,3
je right
cmp inputChoice,4
je left
up:
cmp esi,0
je next
mov eax,esi
mov ecx,11
MUL ecx
mov esi,eax
mov edx,esi
add esi,ebx
mov eax,esi
mov esi,edx
mov dl,level2board[esi+ebx]
cmp dl,'x'
je next
mov al,level2board[esi-11+ebx]
cmp al,'x'
je next
mov level2board[esi+ebx],al
mov level2board[esi-11+ebx],dl
cmp al , 'B'
jne numberGiveUp
mov al , 0
mov numberBomb , dl
mov level2board[esi+ebx],al
mov level2board[esi-11+ebx],dl
jmp bombphardo

numberGiveUp:
cmp dl , 'B'
jne ending
mov dl , 0
mov numberBomb , al
mov level2board[esi+ebx],al
mov level2board[esi-11+ebx],dl
jmp bombphardo

jmp ending

down:
cmp esi,10
je next
mov eax,esi
mov ecx,11
MUL ecx
mov esi,eax
mov edx,esi
add esi,ebx
mov eax,esi
mov esi,edx
mov dl,level2board[esi+ebx]
cmp dl,'x'
je next
mov al,level2board[esi+11+ebx]
cmp al,'x'
je next
mov level2board[esi+ebx],al
mov level2board[esi+11+ebx],dl
cmp al , 'B'
jne numberGiveDown
mov al , 0
mov numberBomb , dl
mov level2board[esi+ebx],al
mov level2board[esi+11+ebx],dl
jmp bombphardo

numberGiveDown:
cmp dl , 'B'
jne ending
mov dl , 0
mov numberBomb , al
mov level2board[esi+ebx],al
mov level2board[esi+11+ebx],dl
jmp bombphardo

jmp ending

right:
cmp ebx,10
je next
mov eax,esi
mov ecx,11
MUL ecx
mov esi,eax
mov edx,esi
add esi,ebx
mov eax,esi
mov esi,edx
mov dl,level2board[esi+ebx]
cmp dl,'x'
je next
mov al,level2board[esi+1+ebx]
cmp al,'x'
je next
mov level2board[esi+ebx],al
mov level2board[esi+1+ebx],dl
cmp al , 'B'
jne numberGiveRight
mov al , 0
mov numberBomb , dl
mov level2board[esi+ebx],al
mov level2board[esi+1+ebx],dl
jmp bombphardo

numberGiveRight:
cmp dl , 'B'
jne ending
mov dl , 0
mov numberBomb , al
mov level2board[esi+ebx],al
mov level2board[esi+1+ebx],dl
jmp bombphardo

jmp ending

left:
cmp ebx,0
je next
mov eax,esi
mov ecx,11
MUL ecx
mov esi,eax
mov edx,esi
add esi,ebx
mov eax,esi
mov esi,edx
mov dl,level2board[esi+ebx]
cmp dl,'x'
je next
mov al,level2board[esi-1+ebx]
cmp al,'x'
je next
mov level2board[esi+ebx],al
mov level2board[esi-1+ebx],dl
cmp al , 'B'
jne numberGiveLeft
mov al , 0
mov numberBomb , dl
mov level2board[esi+ebx],al
mov level2board[esi-1+ebx],dl
jmp bombphardo

numberGiveLeft:
cmp dl , 'B'
jne ending
mov dl , 0
mov numberBomb , al
mov level2board[esi+ebx],al
mov level2board[esi-1+ebx],dl
jmp bombphardo

bombphardo:

call bombSmashingLevel02



jmp ending
next:
call crlf
mov edx,offset errorStr
call writestring
ending:
ret
swappingLevel02 endp

comboRowlevel02 PROC

mov ebx,0
mov esi,0
mov ecx,0
mov eax,0
mov edx,0
mov ecx,11
mov comboRowCheck,1
L1:
push ecx
mov loopie,11
mov edx,11
mov eax,esi
MUL edx
mov esi,eax
mov eax,0
mov edx,0
L2:
mov edx,ebx
mov al,level2board[esi+ebx]
cmp al,'x'
je next1
cmp al , 0
je next1
add ebx,type level2board
cmp al,level2board[esi+ebx]
jne next1
L3:
cmp ebx,9
ja next
add ebx,type level2board
cmp al,level2board[esi+ebx]
jne next
add counterRow,1
jmp L3
next:
cmp counterRow,3
jb next1
mov eax,counterRow
mov ebx,edx
mov comboRowCheck,0
L4:
cmp eax,0
je next2
push eax
mov level2board[esi+ebx],0
mov eax,0
pop eax
add ebx,type boardArray
sub eax,1
jmp L4
next1:
mov ebx,edx
add ebx,type level2board
jmp next3
next2:
mov eax,score
add eax,counterRow
mov score,eax
mov counterRow,2
next3:
sub loopie,1
cmp loopie,0
jne L2
mov ebx,0
add counter,1
mov esi,counter
pop ecx
sub ecx,1
jne L1
mov counter,0
ret
comboRowlevel02 endp

comboCollevel02 PROC
mov comboColCheck,1
mov esi,0
mov ebx,0
next1:
mov ecx,11
L1:
push ecx
mov ecx,11
L2:
mov al,level2board[esi+ebx]
mov edx,esi
cmp al,'x'
je next5
cmp al , 0
je next5
add esi,11
cmp al,level2board[esi+ebx]
jne next4
L3:
add esi,11
cmp al,level2board[esi+ebx]
jne next0
add counterCol,1
jmp L3
next0:
cmp counterCol,3
jb next4
mov eax,counterCol
mov esi,0
mov comboColCheck,0
mov esi,edx
L4:
cmp eax,0
je next3
mov level2board[esi+ebx],0
sub eax,1
add esi,11
jmp L4
next3:
mov eax,score
add eax,counterCol
mov score,eax
next5:
mov counterCol,2
next4:
mov esi,edx
add esi,11
next2:
sub ecx,1
cmp ecx,0
jne L2
add ebx,1
mov esi,0
pop ecx
sub ecx,1
cmp ecx,0
jne L1
ret
comboCollevel02 endp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
boarddroplevel02 PROC
mov esi,10
mov ebx,0
mov ecx,11
mov temp , 11
L1:
push ecx
mov ecx,11
mov eax,esi
MUL ecx
mov esi,eax

L5:
mov al,level2board[esi+ebx]
cmp al,0
jne next3
add zeroCounter,1
next3:
sub esi,11
loop L5
mov eax,0
mov ecx,11
mov esi,10
mov eax,esi
MUL temp
mov esi,eax
sub ecx,zeroCounter
L2:
mov al,level2board[esi+ebx]
cmp esi,0
je next1
cmp al,0
jne next
mov tempStore,esi
L3:
cmp level2board[esi-11+ebx],0
jne L4
add boardDropCounter,1
sub esi,11
jmp L3
L4:
mov esi,tempStore
mov ebp,esi
mov al,level2board[esi+ebx]
mov tempVar,al
mov eax,boardDropCounter
MUL temp
sub ebp,eax
mov eax,0
mov edx,0
mov dl,level2board[ebp+ebx]
cmp dl , 'x'
je next
MOV al,tempVar
mov level2board[ebp+ebx],al
mov level2board[esi+ebx],dl
next:
mov boardDropCounter,1
sub esi,11
next1:
sub ecx,1
cmp ecx,0
jne L2
mov zeroCounter,0
mov esi,10
add ebx,1
pop ecx
sub ecx,1
cmp ecx,0
jne L1
mov temp,10
ret
boarddroplevel02 endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; function of display board level 3
displayBoardLevel03 PROC
mov ebx,OFFSET level3board
mov ecx , 10
l1:
push ecx
mov ecx, 10

mov edx , offset space
call writestring
l2:
mov eax,0
mov al ,[ebx]
cmp al , 'X'
je next
cmp al , 'B'
je next
cmp al,1
jne next2
mov dl,al
mov eax,4
call settextcolor
mov eax,0
mov al,dl
call writedec
jmp agayjumpkro
next2:
cmp al,2
jne next3
mov dl,al
mov eax,3
call settextcolor
mov eax,0
mov al,dl
call writedec
jmp agayjumpkro
next3:
cmp al,3
jne next4
mov dl,al
mov eax,1
call settextcolor
mov eax,0
mov al,dl
call writedec
jmp agayjumpkro
next4:
cmp al,4
jne next5
mov dl,al
mov eax,5
call settextcolor
mov eax,0
mov al,dl
call writedec
jmp agayjumpkro
next5:
cmp al,5
mov dl,al
mov eax,8
call settextcolor
mov eax,0
mov al,dl
call writedec
jmp agayjumpkro
next:
cmp al,'X'
jne next01
mov dl,al
mov eax,6
call settextcolor
mov al,dl
call writechar
jmp agayjumpkro
next01:
mov al,[ebx]
mov dl,al
mov eax,14
call settextcolor
mov eax,0
mov al,dl
call writeChar
agayjumpkro:
mov edx , offset space01
call writestring
add ebx,Type level3board
sub ecx,1
cmp ecx,0
jne L2
call crlf
pop ecx
sub ecx,1
cmp ecx,0
jne L1
ret
displayBoardLevel03 endp

;swapping for level 03 proc

swappingOfLevel03 PROC
push esi
push ebx
push edx
push ecx
mov esi,row_index
mov ebx,col_index
cmp inputChoice,1
je up
cmp inputChoice,2
je down
cmp inputChoice,3
je right
cmp inputChoice,4
jmp left
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
up:
cmp row_index,1
jb error
mov eax , row_index
mov ecx , 10
mul ecx
mov esi , eax
mov dl,level3board[esi+ebx]  ; the element he wants to swap
mov al,level3board[esi -10 +ebx]
cmp dl , 'X'
je next0
cmp al , 'X'
je next0
mov level3board[esi+ebx],al
mov level3board[esi-10+ebx],dl
cmp al , 'B'
jne numberGiveUp
mov al , 0
mov numberBomb , dl
mov level3board[esi+ebx],al
mov level3board[esi-10+ebx],dl
jmp bombphardo

numberGiveUp:
cmp dl , 'B'
jne next0
mov dl , 0
mov numberBomb , al
mov level3board[esi+ebx],al
mov level3board[esi-10+ebx],dl
jmp bombphardo
jmp next0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
down:
cmp row_index,8
ja error
mov eax , row_index
mov ecx , 10
mul ecx
mov esi , eax
mov dl,level3board[esi+ebx] ; the element he wants to swap
mov al,level3board[esi+10+ebx]
cmp dl , 'X'
je next0
cmp al , 'X'
je next0
mov level3board[esi+ebx],al
mov level3board[esi+10+ebx],dl
cmp al , 'B'
jne numberGiveDown
mov al , 0
mov numberBomb , dl
mov level3board[esi+ebx],al
mov level3board[esi+10+ebx],dl
jmp bombphardo

numberGiveDown:
cmp dl , 'B'
jne next0
mov dl , 0
mov numberBomb , al
mov level3board[esi+ebx],al
mov level3board[esi+10+ebx],dl
jmp bombphardo

jmp next0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
right:
cmp col_index,8
ja error
mov eax , row_index
mov ecx , 10
mul ecx
mov esi , eax
mov dl,level3board[esi+ebx]  ; the element he wants to swap
mov al,level3board[esi+1+ebx]
cmp dl , 'X'
je next0
cmp al , 'X'
je next0
mov level3board[esi+ebx],al
mov level3board[esi+1+ebx],dl
cmp al , 'B'
jne numberGiveRight
mov al , 0
mov numberBomb , dl
mov level3board[esi+ebx],al
mov level3board[esi+1+ebx],dl
jmp bombphardo

numberGiveRight:
cmp dl , 'B'
jne next0
mov dl , 0
mov numberBomb , al
mov level3board[esi+ebx],al
mov level3board[esi+1+ebx],dl
jmp bombphardo

jmp next0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
left:
cmp col_index,1
jb error
mov eax , row_index
mov ecx , 10
mul ecx
mov esi , eax
mov dl,level3board[esi+ebx]  ; the element he wants to swap
mov al,level3board[esi-1+ebx]
cmp dl , 'X'
je next0
cmp al , 'X'
je next0
mov level3board[esi+ebx],al
mov level3board[esi-1+ebx],dl
cmp al , 'B'
jne numberGiveLeft
mov al , 0
mov numberBomb , dl
mov level3board[esi+ebx],al
mov level3board[esi-1+ebx],dl
jmp bombphardo

numberGiveLeft:
cmp dl , 'B'
jne next0
mov dl , 0
mov numberBomb , al
mov level3board[esi+ebx],al
mov level3board[esi-1+ebx],dl
jmp bombphardo

bombphardo:
call bombSmashinglevel03

jmp next0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
error:
call crlf
mov edx,offset errorStr
call writestring

next0:
pop ecx
pop edx
pop ebx
pop esi
ret
swappingOfLevel03 endp

getInput proc
push esi
push ebx
push edx
push ecx


mov edx,offset swapstrrow
call writestring
call readdec
mov row_index,eax
call crlf
mov edx,offset swapStrCol
call writestring
call readdec
mov col_index,eax
call crlf
mov edx , offset swapstr
call writestring
call readdec
mov inputChoice,al



pop ecx
pop edx
pop ebx
pop esi
ret
getInput endp

;;;;;;;;

comboRowLevel3 PROC
mov ebx,0
mov esi,0
mov ecx,0
mov eax,0
mov edx,0
mov ecx,10
mov comboRowCheck,1
L1:
push ecx
mov loopie,10
mov edx,10
mov eax,esi
MUL edx
mov esi,eax
mov eax,0
mov edx,0
L2:
mov edx,ebx
mov al,level3board[esi+ebx]
cmp al,0
je next1
add ebx,type level3board
cmp al,level3board[esi+ebx]
jne next1
L3:
cmp ebx,8
ja next
add ebx,type level3board
cmp al,level3board[esi+ebx]
jne next
add counterRow,1
jmp L3
next:
cmp counterRow,3
jb next1
mov eax,counterRow
mov ebx,edx
mov comboRowCheck,0
L4:
cmp eax,0
je next2
mov level3board[esi+ebx],0
add ebx,type level3board
sub eax,1
jmp L4
next1:
mov ebx,edx
add ebx,type level3board
jmp next3
next2:
mov eax,score
add eax,counterRow
mov score,eax
mov counterRow,2
next3:
sub loopie,1
cmp loopie,0
jne L2
mov ebx,0
add counter,1
mov esi,counter
pop ecx
sub ecx,1
jne L1
mov counter,0
ret
comboRowLevel3 endp

; combo col function

comboColLevel3 PROC
mov comboColCheck,1
mov esi,0
mov ebx,0
next1:
mov ecx,10
L1:
push ecx
mov ecx,9
L2:
mov al,level3board[esi+ebx]
mov edx,esi
cmp al,0
je next5
add esi,10
cmp al,level3board[esi+ebx]
jne next4
L3:
cmp esi,80
ja next0
add esi,10
cmp al,level3board[esi+ebx]
jne next0
add counterCol,1
jmp L3
next0:
cmp counterCol,3
jb next4
mov eax,counterCol
mov esi,0
mov comboColCheck,0
mov esi,edx
L4:
cmp eax,0
je next3
mov level3board[esi+ebx],0
sub eax,1
add esi,10
jmp L4
next3:
mov eax,score
add eax,counterCol
mov score,eax
next5:
mov counterCol,2
next4:
mov esi,edx
add esi,10
next2:
sub ecx,1
cmp ecx,0
jne L2
add ebx,1
mov esi,0
pop ecx
sub ecx,1
cmp ecx,0
jne L1
ret
comboColLevel3 endp

;; boardDrop level 3
boardDropLevel3 PROC
mov esi,9
mov ebx,0
mov ecx,10
L1:
push ecx
mov ecx,10
mov eax,esi
MUL ecx
mov esi,eax
L5:
mov al,level3board[esi+ebx]
cmp al,0
jne next3
add zeroCounter,1
next3:
sub esi,10
loop L5
mov eax,0
mov ecx,10
mov esi,9
mov eax,esi
MUL temp
mov esi,eax
sub ecx,zeroCounter
L2:
mov al,level3board[esi+ebx]
cmp esi,0
je next1
cmp al,0
jne next
mov tempStore,esi
L3:
cmp level3board[esi-10+ebx],0
jne L4
add boardDropCounter,1
sub esi,10
jmp L3
L4:
mov esi,tempStore
mov ebp,esi
mov al,level3board[esi+ebx]
mov tempVar,al
mov eax,boardDropCounter
MUL temp
sub ebp,eax
mov eax,0
mov edx,0
mov dl,level3board[ebp+ebx]
cmp dl , 'X'
jne x_ke_uper_tapa_do
mov dl , level3board[ebp-10+ebx]
MOV al,tempVar
mov level3board[ebp-10+ebx],al
mov level3board[esi+ebx],dl
jmp next
x_ke_uper_tapa_do:
MOV al,tempVar
mov level3board[ebp+ebx],al
mov level3board[esi+ebx],dl

next:
mov boardDropCounter,1
sub esi,10
next1:
sub ecx,1
cmp ecx,0
jne L2
mov zeroCounter,0
mov esi,9
add ebx,1
pop ecx
sub ecx,1
cmp ecx,0
jne L1
ret
boardDropLevel3 endp

; checking zeros and put value for level 1
putValuelevel01 proc
mov ebx,OFFSET boardArray
mov ecx , 10
l1:
push ecx
mov ecx, 10
l2:
mov eax,0
mov al ,[ebx]
cmp al , 0
jne next
push edx
movzx edx , level01Rand
call randomFunction
mov [ebx] , al
pop edx
next:
add ebx,Type boardArray
loop l2
pop ecx
loop l1
ret
putValuelevel01 endp

; checking zeros and put value for level 2
putValuelevel02 proc
mov ebx,OFFSET level2board
mov ecx , 11
l1:
push ecx
mov ecx, 11
l2:
mov eax,0
mov al ,[ebx]
cmp al , 0
jne next
push edx
movzx edx , level02Rand
call randomFunction
mov [ebx] , al
pop edx
next:
add ebx,Type level2board
loop l2
pop ecx
loop l1
ret
putValuelevel02 endp

; checking zeros and put value for level 1
putValuelevel03 proc
mov ebx,OFFSET level3board
mov ecx , 10
l1:
push ecx
mov ecx, 10
l2:
mov eax,0
mov al ,[ebx]
cmp al , 0
jne next
push edx
movzx edx , level03Rand
call randomFunction
mov [ebx] , al
pop edx
next:
add ebx,Type level3board
loop l2
pop ecx
loop l1
ret
putValuelevel03 endp



; unique randomNumber generator
randomFunction proc
L1:
call randomize
mov eax , edx
call randomrange
cmp al , 0
jne next
add al, 1
next:
cmp al , previousNumRand
je L1
mov previousNumRand , al
ret
randomFunction endp

bombSmashing PROC
push eax
push edx
push ecx
push ebx
mov ebx,OFFSET boardArray
mov ecx , 10
l1:
push ecx
mov ecx, 10

l2:
mov eax,0
mov al ,[ebx]
cmp al , numberBomb
jne next
mov al , 0
mov [ebx] , al
next:
add ebx,Type boardArray
loop l2
pop ecx

loop l1

add score,5
pop ebx
pop ecx
pop edx
pop eax
ret
bombSmashing endp

bombSmashingLevel02 proc
push eax
push edx
push ecx
push ebx
mov ebx,OFFSET level2board
mov ecx , 11
l1:
push ecx
mov ecx, 11

l2:
mov eax,0
mov al ,[ebx]
cmp al , numberBomb
jne next
mov al , 0
mov [ebx] , al
next:
add ebx,Type level2board
loop l2
pop ecx

loop l1

add score,5
pop ebx
pop ecx
pop edx
pop eax
ret
bombSmashingLevel02 endp


bombSmashinglevel03 proc
push eax
push edx
push ecx
push ebx
mov ebx,OFFSET level3board
mov ecx , 10
l1:
push ecx
mov ecx, 10

l2:
mov eax,0
mov al ,[ebx]
cmp al , numberBomb
jne next
mov al , 0
mov [ebx] , al
next:
add ebx,Type level3board
loop l2
pop ecx
loop l1
add score,5
pop ebx
pop ecx
pop edx
pop eax
ret
bombSmashinglevel03 endp

END MAIN

